lua_shared_dict conf 2m;

init_by_lua_block {
   local config = ngx.shared.conf;
   config:set("application_id", "eyJhcHAiOiI2NjA6NjQiLCJ2ZXIiOiIyLjAiLCJvcmciOiIxMTY6MTE2IiwiaWF0IjoxNTgzNzEyMDAwfQ.pFmI83U8CTUEiTdzNu0Vv0YkuajloaO1H4GhqAx_GcA")
}

lua_package_path "/usr/local/openresty/luajit/share/lua/5.1/lua/resty/moesif/?.lua;;";

server {
  listen 80;
  resolver 8.8.8.8;

   set_by_lua_block $user_id { 
     return ngx.resp.get_headers()["User-Id"]
   }

   set_by_lua_block $company_id { 
     return ngx.resp.get_headers()["Company-Id"]
   }

  set_by_lua_block $api_version { 
     return ngx.req.get_headers()["X-Api-Version"]
   }

  access_by_lua '
    local req_body, res_body = "", ""
    local req_post_args = {}

    ngx.req.read_body()
    req_body = ngx.req.get_body_data()
    local content_type = ngx.req.get_headers()["content-type"]
    if content_type and string.find(content_type:lower(), "application/x-www-form-urlencoded", nil, true) then
      req_post_args = ngx.req.get_post_args()
    end
    ngx.ctx.api_version = ngx.shared.conf:get("api_version")
    -- keep in memory the bodies for this request
    ngx.ctx.moesif = {
      req_body = req_body,
      res_body = res_body,
      req_post_args = req_post_args
    }
  ';

  body_filter_by_lua '
    local chunk = ngx.arg[1]
    local moesif_data = ngx.ctx.moesif or {res_body = ""} -- minimize the number of calls to ngx.ctx while fallbacking on default value
    moesif_data.res_body = moesif_data.res_body .. chunk
    ngx.ctx.moesif = moesif_data
  ';


  location / {
    proxy_pass http://127.0.0.1:8081/api;
    log_by_lua_file /usr/local/openresty/luajit/share/lua/5.1/lua/resty/moesif/send_event.lua;
  }
}

server {
  listen 8081;

  location /api {
     add_header Content-Type "application/json";
     return 200 '{\r\n  \"user_id\": 1,\r\n  \"company_id\": 2,\r\n  \"message\": \"Hello World\",\r\n  \"completed\": true\r\n}';
  }
}
